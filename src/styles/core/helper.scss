// * Margin & Padding
$sides: (
  "t": "top",
  "b": "bottom",
  "l": "left",
  "r": "right",
  "": (
    "top",
    "left",
    "bottom",
    "right"
  ),
  "x": (
    "left",
    "right"
  ),
  "y": (
    "top",
    "bottom"
  )
);
$breakpoints: (
  "": "",
  // "xs": $bp-max-xs,
  // "sm": $bp-max-sm,
  // "md": $bp-max-md,
  // "lg": $bp-max-lg,
  // "xl": $bp-max-xl
);
$spacings: (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,auto);
@each $breakName, $breakValue in $breakpoints {
  @each $space in $spacings {
    @each $prefix, $positions in $sides {
      @if $breakName != "" {
        $prefix: #{$prefix}-#{$breakName};
      } @else {
        $prefix: #{$prefix};
      }

      @if $breakName != "" {
        @media (min-width: $breakValue) {
          .p#{$prefix}-#{$space} {
            @each $pos in $positions {
              padding-#{$pos}: if($space == auto, $space, #{$space * 0.4}rem) !important;
            }
          }
          .m#{$prefix}-#{$space} {
            @each $pos in $positions {
              margin-#{$pos}: if($space == auto, $space, #{$space * 0.4}rem) !important;
            }
          }
        }
      } @else {
        .p#{$prefix}-#{$space} {
          @each $pos in $positions {
            padding-#{$pos}: if($space == auto, $space, #{$space * 0.4}rem) !important;
          }
        }
        .m#{$prefix}-#{$space} {
          @each $pos in $positions {
            margin-#{$pos}: if($space == auto, $space, #{$space * 0.4}rem) !important;
          }
        }
      }
    }
  }
}

// * Display
$displayProps: ("block", "inline-block", "inline", "flex", "grid", "inline-flex", "inline-grid", "table", "inline-table", "list-item", "none", "contents");

@each $disp in $displayProps {
  .d-#{$disp} {
    display: #{$disp} !important;
  }
}

// * Flexbox
$alignments: ("center", "space-between", "space-around", "space-evenly", "flex-start", "flex-end");
.flex-direction-row {
  flex-direction: row !important;
}
.flex-direction-row-reverse {
  flex-direction: row-reverse !important;
}
.flex-direction-col {
  flex-direction: column !important;
}
.flex-direction-col-reverse {
  flex-direction: column-reverse !important;
}
@each $align in $alignments {
  .justify-#{$align} {
    justify-content: #{$align} !important;
  }

  .items-#{$align} {
    align-items: #{$align} !important;
  }

  .justify-items-#{$align} {
    justify-items: #{$align} !important;
  }

  .content-#{$align} {
    align-content: #{$align} !important;
  }
}

// * Text align
$textAlignments: ("left", "right", "center", "revert");

@each $textAlign in $textAlignments {
  .text-#{$textAlign} {
    text-align: #{$textAlign};
  }
}

// * Width & Height
$valueA: () !default;
$valueA: map-merge(
  (
    null: 'null',
    min: 'min',
    max: 'max',
  ),
  $valueA
);
$valueB: () !default;
$valueB: map-merge(
  (
    width: 'w',
    height: 'h',
  ),
  $valueB
);
@each $size, $abbreviation in ($valueA) {
    @each $property, $firstLetter in ($valueB) {
        @for $val from 0 through 100 {
          @if $size == null {
            .#{$property}-#{$val} {
              #{$property}: #{$val}+'%' !important
            }
          } @else {
            .#{$size}-#{$property}-#{$val} {
                #{$abbreviation}-#{$property}: #{$val}+'%' !important
            }
          }
        }
    }
}

// * Font-weight
$fontWeightAlignments: (100, 300, 500, 700, 900);
@each $fontWeight in $fontWeightAlignments {
  .fw-#{$fontWeight} {
    font-weight: #{$fontWeight} !important;
  }
}

.text-underline {
  text-decoration: underline;
}

.word-break-all {
  word-break: break-all;
}
